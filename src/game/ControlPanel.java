/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game;

import java.util.ArrayList;

/**
 * Generates and handles buttons' actions such as 'Skip Level' or 'Restart'.
 * @author Ali Narlioglu
 */
public class ControlPanel extends javax.swing.JPanel {
    
    /**
     * Declares a visible instance of the 'GameLevel' class.
     */
    GameLevel world;
    
    /**
     * Declares a visible instance of the 'Character' class.
     */
    Character character;
    
    /**
     * Declares a visible instance of the 'Time' class.
     */
    Time time;
    
    /**
     * Declares a visible instance of 'Game' class.
     */
    Game game;
    
    /**
     * Declares a visible instance of 'MyView' class.
     */
    MyView view;
    
    /**
     * Declares a visible instance of 'Score' class.
     */
    Score highscore;
    
    /**
     * Declares a private integer variable.
     */
    private int finishCurrentLevel;
    
    /**
     * Declares a private double variable.
     */
    private double volume;
    
    /**
     * Creates new form ControlPanel. Also, Also, sets a constructor that will link the declared visible instances of the GameLevel, Score, Character, Time, Game and MyView classes to the initialised instances within other classes.
     * Also, it sets the value of finishCurrentLevel to integer value zero, and sets the value of volume to double value 0.5.
     * @param world The game world.
     * @param character The 'Character' instance.
     * @param time The 'Time' instance.
     * @param game The 'Game' instance.
     * @param view The 'MyView' instance.
     * @param highscore The 'Score' instance.
     */
    public ControlPanel(GameLevel world, Character character, Time time, Game game, MyView view, Score highscore) {
        initComponents();
        this.world = world;
        this.character=character;
        this.time=time;
        this.game=game;
        this.view=view;
        this.highscore=highscore;
        finishCurrentLevel = 0;
        volume=0.5;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setToolTipText("");
        setAlignmentX(0.3F);
        setAlignmentY(0.3F);

        jButton1.setText("Restart");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Quit");
        jButton2.setAlignmentY(0.4F);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Skip Level");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Volume (+)");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Volume (-)");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jButton1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton5)
                            .addComponent(jButton3))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addGap(11, 11, 11)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exits the game.
     * @param evt The ActionEvent
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Restarts the current level, however the 'Character' instance's lives must be zero for the button to function.
     * @param evt The ActionEvent
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(character.getLives()==0){
            //Stop current time
            time.stop();
            //Create a new time
            time = new Time(game);
            //Pass the new time to the view
            view.setTime(time);
            //Pass the new time to the highscore
            highscore.setTime(time);
            //Pass the new time to GameLevel
            game.getWorld().setTime(time);
            //Setting a new arraylist to hold the high scores, so the arraylist doesn't duplicate values by re-reading the scores file again when game is restarted
            highscore.setScores(new ArrayList<Integer>());
            //Reset character lives
            character.fixedLives();
            //Re-playing the music
            game.getWorld().getGameMusic().loop();
            //Run the game!
            world.start(); 
            //Start the new time!
            time.start();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Skips the current level and goes into the next level.
     * @param evt The ActionEvent
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //Getting the score needed to reach the next level e.g. if current level is 1, then it takes 10. If level is at 2, then it takes 18.
        finishCurrentLevel = game.finish();
        //Overwriting the score to the amount required to go the next level
        time.secondsPassed = finishCurrentLevel;
        //Implements the goNextLevel method which takes the level value, then according to the value it increments level by 1 and thus runs the next level
        game.goNextLevel();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * Increases the sound level of the background music.
     * @param evt The ActionEvent
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        volume = volume + 0.5;
        game.getWorld().getGameMusic().setVolume(volume);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * Decreases the sound level of the background music.
     * @param evt The ActionEvent
     */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        volume = volume - 0.5;
        game.getWorld().getGameMusic().setVolume(volume);
    }//GEN-LAST:event_jButton5ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    // End of variables declaration//GEN-END:variables
}
